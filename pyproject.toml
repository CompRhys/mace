[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mace-torch"
dynamic = ["version"]
description = "MACE - Fast and accurate machine learning interatomic potentials with higher order equivariant message passing."
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
]
dependencies = [
    "torch>=1.12",
    "e3nn==0.4.4",
    "numpy",
    "opt_einsum",
    "ase",
    "torch-ema",
    "prettytable",
    "matscipy",
    "h5py",
    "torchmetrics",
    "python-hostlist",
    "configargparse",
    "GitPython",
    "pyYAML",
    "tqdm",
    "lmdb",
    "orjson",
    "matplotlib",
    "pandas",
]

[project.scripts]
mace_active_learning_md = "mace.cli.active_learning_md:main"
mace_create_lammps_model = "mace.cli.create_lammps_model:main"
mace_eval_configs = "mace.cli.eval_configs:main"
mace_plot_train = "mace.cli.plot_train:main"
mace_run_train = "mace.cli.run_train:main"
mace_prepare_data = "mace.cli.preprocess_data:main"
mace_finetuning = "mace.cli.fine_tuning_select:main"
mace_convert_device = "mace.cli.convert_device:main"
mace_select_head = "mace.cli.select_head:main"
mace_e3nn_cueq = "mace.cli.convert_e3nn_cueq:main"
mace_cueq_to_e3nn = "mace.cli.convert_cueq_e3nn:main"

[project.optional-dependencies]
wandb = ["wandb"]
fpsample = ["fpsample"]
dev = [
    "black",
    "isort",
    "mypy",
    "pre-commit",
    "pytest",
    "pytest-benchmark",
    "pylint",
]
schedulefree = ["schedulefree"]
cueq = ["cuequivariance-torch>=0.2.0"]
cueq-cuda-11 = ["cuequivariance-ops-torch-cu11>=0.2.0"]
cueq-cuda-12 = ["cuequivariance-ops-torch-cu12>=0.2.0"]

[tool.isort]
profile = "black"

[tool.pylint.MESSAGES_CONTROL]
disable = [
    "line-too-long",
    "no-member",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-many-arguments",
    "too-many-positional-arguments",
    "too-many-locals",
    "too-many-return-statements",
    "not-callable",
    "logging-fstring-interpolation",
    "logging-not-lazy",
    "logging-too-many-args",
    "invalid-name",
    "too-few-public-methods",
    "too-many-instance-attributes",
    "too-many-statements",
    "too-many-branches",
    "import-outside-toplevel",
    "cell-var-from-loop",
    "duplicate-code",
    "use-dict-literal",
]

[tool.pylint.MASTER]
ignore-paths = ["^mace/tools/torch_geometric/.*$", "^mace/tools/scatter.py$"]

[tool.pylint.FORMAT]
max-module-lines = 1500

[tool.ruff]
target-version = "py38"
select = ["FA102"]

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true

# Group all external packages that need ignore_missing_imports
[[tool.mypy.overrides]]
module = [
    "setuptools.*",
    "e3nn.*",
    "scipy.*",
    "ase.*",
    "prettytable.*",
    "torch_ema.*",
    "matplotlib.*",
    "pandas.*",
    "opt_einsum.*",
]
ignore_missing_imports = true

# Group internal modules that need ignore_errors
[[tool.mypy.overrides]]
module = ["mace.tools.torch_geometric.*", "mace.tools.scatter"]
ignore_errors = true

[tool.hatch.build.targets.wheel]
packages = ["mace"]

[tool.hatch.version]
path = "mace/__version__.py"
